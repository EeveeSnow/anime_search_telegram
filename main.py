import telebot
from telebot import types
from api import get_recommendations, find_similar_title, get_anime_by_id

import json
with open("api.json") as f:
    config = json.load(f)
api_key = config["api_key"]

bot = telebot.TeleBot(api_key)

@bot.message_handler(commands=['start', 'help'])
def start(message):
    response = (
            "/searchid <–Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ> –¥–ª—è –ø–æ–∏—Å–∫–∞ üÜî –∏ –∏–Ω—Ñ–æ—Ä–º–∞–∏–∏ –æ–± –∞–Ω–∏–º–µ.\n"
            "/search <id –∞–Ω–∏–º–µ> –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∞–Ω–∏–º–µ."
        )
    bot.reply_to(message, response, parse_mode='Markdown')

@bot.message_handler(commands=['searchid'])
def search_anime(message):
    try:
        title = message.text.split(maxsplit=1)[1]
    except IndexError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ –ø–æ—Å–ª–µ /searchid, –Ω–∞–ø—Ä–∏–º–µ—Ä: /searchid Frieren")
        return
    idx, _ = find_similar_title(title)
    
    if idx is None:
        bot.reply_to(message, "–ü–æ—Ö–æ–∂–∏–µ –∞–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. üò¢")
    else:
        anime = get_anime_by_id(idx)
        response = (
            f"üé¨ *{anime['title']}*\n"
            f"üÜî *{idx}*\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ*: {anime['description']}\n" 
            f"üìö *–ñ–∞–Ω—Ä—ã*: {anime['genres']}\n"
            f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥*: {anime['rating']}\n"
            "‚ùì –ï—Å–ª–∏ –≤—ã –∏—Å–∫–∞–ª–∏ –¥—Ä—É–≥–æ–µ –∞–Ω–∏–º–µ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ. üò¢"
        )
        bot.reply_to(message, response, parse_mode='Markdown')


@bot.message_handler(commands=['search'])
def search_anime(message):
    try:
        idx = int(message.text.split(maxsplit=1)[1])
    except IndexError or TypeError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ üÜî –∞–Ω–∏–º–µ –ø–æ—Å–ª–µ /search, –Ω–∞–ø—Ä–∏–º–µ—Ä: /search Frieren")
        return
    
    if any(get_anime_by_id(idx)) == None:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ üÜî –∞–Ω–∏–º–µ –ø–æ—Å–ª–µ /search, –Ω–∞–ø—Ä–∏–º–µ—Ä: /search Frieren")
    else:
        data = get_recommendations(idx)
        response = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ü–æ—Ö–æ–∂–∏—Ö –∞–Ω–∏–º–µ:\n"
        for i in range(10):
            response += f"{i+1}. '{data[0][i]}' —Å—Å—ã–ª–∫–∞ –Ω–∞ anilist.co: https://anilist.co/anime/{data[1][i]}\n"
        bot.reply_to(message, response, parse_mode='Markdown')


# @bot.message_handler(content_types=['text'])
# def get_text_messages(message):
#     data = get_recommendations(message.text)
#     text = "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ü–æ—Ö–æ–∂–∏—Ö –∞–Ω–∏–º–µ:\n"
#     for i in range(10):
#         text += f"{i+1}. '{data[0][i]}' —Å—Å—ã–ª–∫–∞ –Ω–∞ anilist.co: https://anilist.co/anime/{data[1][i]}\n"
#     bot.send_message(message.from_user.id, text)


bot.polling(none_stop=True, interval=0)